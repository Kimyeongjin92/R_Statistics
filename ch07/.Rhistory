scale_colour_manual(values = c("#6BA5F7", "#545454"))
ggplot() +
geom_sf(data = xy, aes(fill = ..y..)) +
scale_colour_manual(values = c("#6BA5F7", "#545454"))
ggplot() +
geom_sf(data = xy, aes(fill = ..count..)) +
scale_colour_manual(values = c("#6BA5F7", "#545454"))
ggplot() +
geom_sf(data = xy, aes(fill = ..x..)) +
scale_colour_manual(values = c("#6BA5F7", "#545454"))
ggplot() +
geom_sf(data = xy, aes(fill = ..x..))
ggplot() +
geom_sf(data = xy, aes(fill = y))
ggplot() +
geom_sf(data = xy)
xy.sp.sf
xy.sp
xy = cbind(
x = seq(0, 15, by=0.01),
y = dchisq(x,df=3)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy)), "1")))
xy.sp
View(xy.sp)
xy = cbind(
x = seq(0, 15, by=0.01),
y = dchisq(x,df=3)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy)), "1")))
xy.sp.sf <- sf::st_as_sf(xy.sp) %>%
mutate(ID = factor(1))
ggplot() +
geom_sf(data = xy.sp, aes(fill = ID))
xy = cbind(
x = seq(0, 15, by=0.01),
y = dchisq(x,df=3)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy)), "1")))
xy.sp.sf <- sf::st_as_sf(xy.sp) %>%
mutate(ID = factor(1))
ggplot() +
geom_sf(data = xy.sp.sf, aes(fill = ID))
xy = cbind(
x = seq(0, 15, by=0.01),
y = dchisq(x,df=3)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy)), "1")))
xy.sp.sf <- sf::st_as_sf(xy.sp) %>%
mutate(ID = 1)
ggplot() +
geom_sf(data = xy.sp.sf, aes(fill = ID))
xy = cbind(
x = c(13.4, 13.4, 13.6, 13.6, 13.4),
y = c(48.9, 49, 49, 48.9, 48.9)
)
hole.xy <- cbind(
x = c(13.5, 13.5, 13.45, 13.45, 13.5),
y = c(48.98, 48.92, 48.92, 48.98, 48.98)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy),
Polygon(hole.xy, hole = TRUE)), "1"),
Polygons(list(Polygon(xy + 0.2),
Polygon(xy + 0.35),
Polygon(hole.xy + 0.2, hole = TRUE)), "2")
))
xy.sp.hatch <- hatched.SpatialPolygons(xy.sp, density = c(60, 90), angle = c(45, 135))
install.packages('HatchedPolygons')
library(HatchedPolygons)
install.packages('HatchedPolygons')
xy = cbind(
x = c(13.4, 13.4, 13.6, 13.6, 13.4),
y = c(48.9, 49, 49, 48.9, 48.9)
)
hole.xy <- cbind(
x = c(13.5, 13.5, 13.45, 13.45, 13.5),
y = c(48.98, 48.92, 48.92, 48.98, 48.98)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy),
Polygon(hole.xy, hole = TRUE)), "1"),
Polygons(list(Polygon(xy + 0.2),
Polygon(xy + 0.35),
Polygon(hole.xy + 0.2, hole = TRUE)), "2")
))
xy.sp.sf <- sf::st_as_sf(xy.sp) %>%
mutate(ID = factor(1:2))
xy = cbind(
x = c(13.4, 13.4, 13.6, 13.6, 13.4),
y = c(48.9, 49, 49, 48.9, 48.9)
)
hole.xy <- cbind(
x = c(13.5, 13.5, 13.45, 13.45, 13.5),
y = c(48.98, 48.92, 48.92, 48.98, 48.98)
)
xy.sp <- SpatialPolygons(list(
Polygons(list(Polygon(xy),
Polygon(hole.xy, hole = TRUE)), "1"),
Polygons(list(Polygon(xy + 0.2),
Polygon(xy + 0.35),
Polygon(hole.xy + 0.2, hole = TRUE)), "2")
))
xy.sp.sf <- sf::st_as_sf(xy.sp) %>%
mutate(ID = factor(1:2))
xy = cbind(
x = c(13.4, 13.4, 13.6, 13.6, 13.4),
y = c(48.9, 49, 49, 48.9, 48.9)
)
hole.xy <- cbind(
x = c(13.5, 13.5, 13.45, 13.45, 13.5),
y = c(48.98, 48.92, 48.92, 48.98, 48.98)
)
=======================
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am0 <- mtcars[mtcars$am == 0,]
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
library(MASS)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am1
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
mtcars[mtcars$am == 1,]
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am0 <- mtcars[mtcars$am == 0,]
shapiro.test(am0$mpg)            # P(0.8987)>0.05
qqnorm(am0$mpg)                  # 정규성을 이룬다.
qqline(am0$mpg)
var.test(mtcars$mpg ~ mtcars$am) # P(0.06691)>0.05 : 분산이 서로 동일하다.
t.test(mtcars$mpg ~ mtcars$am,   # P(0.000285)<0.05
mu = 0,                   #  H0을 기가하여  오토와 수동의 mpg는 다르다(차이가 있다.).
var.equal=T)
install.packages('MASS')
install.packages("MASS")
#  3-1) subcompact 자동차와 midsize 자동차의 고속도로 연비 검정
# H0 subcompact와 midsize의 고속도로 연비는 차이가 없다(같다)
# H1 subcompact와 midsize의 고속도로 연비는 차이가 있다(다르다)
library(ggplot2)
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
abline(am1$mpg)
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
am1
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
#  1) mtcars 기어종류 am(오토/수동)에 따른 mpg의 차이가 통계적으로 유의한가.
# H0 수동과 오토의 mpg는 차이가 없다(같다)
# H1 수동과 오토의 mpg는 차이가 있다(다르다)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
knitr::opts_chunk$set(echo = TRUE)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am1
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg)                  # 정규성을 이룬다.
qqline(am1$mpg)
am0 <- mtcars[mtcars$am == 0,]
shapiro.test(am0$mpg)            # P(0.8987)>0.05
qqnorm(am0$mpg)                  # 정규성을 이룬다.
qqline(am0$mpg)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg) ; qqline(am1$mpg)                 # 정규성을 이룬다.
am0 <- mtcars[mtcars$am == 0,]
shapiro.test(am0$mpg)            # P(0.8987)>0.05
qqnorm(am0$mpg)                  # 정규성을 이룬다.
qqline(am0$mpg)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg) %>% qqline(am1$mpg)                 # 정규성을 이룬다.
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg) + qqline(am1$mpg)                 # 정규성을 이룬다.
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg) ; qqline(am1$mpg)                 # 정규성을 이룬다.
am0 <- mtcars[mtcars$am == 0,]
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)            # P(0.5363)>0.05
qqnorm(am1$mpg) ;qqline(am1$mpg)                 # 정규성을 이룬다.
am0 <- mtcars[mtcars$am == 0,]
shapiro.test(am0$mpg)            # P(0.8987)>0.05
qqnorm(am0$mpg)                  # 정규성을 이룬다.
qqline(am0$mpg)
am1 <- mtcars[mtcars$am == 1,]
shapiro.test(am1$mpg)             # P(0.5363)>0.05
qqnorm(am1$mpg); qqline(am1$mpg)  # 정규성을 이룬다.
mean(am0$mpg) ; sd(am0$mpg)
mean(am1$mpg) ; sd(am1$mpg)
length(am1$mpg)
length(am0$mpg)
length(am0$mpg)
length(am1$mpg)
mean(am0$mpg) ; sd(am0$mpg)
mean(am1$mpg) ; sd(am1$mpg)
# 3) 판정
t.test(mtcars$mpg ~ mtcars$am,   # P(0.000285)<0.05 오토와 수동의 mpg는 다르다(차이가 있다.).
mu = 0,
var.equal=T)
# 1) 정규성 등분산성 검토
USA<-subset(Cars93, Origin=='USA')
non<-subset(Cars93, Origin=='non-USA')
shapiro.test(non$Price) ;qqnorm(non$Price) ;qqline(non$Price) # P(0.0002)<0.05 : 정규성을 이루지 않는다.
var.test(Cars93$Price ~ Cars93$Origin) # P(0.01387)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(Cars93$Price ~ Cars93$Origin,   # P(0.34)>0.05 평균의 차이가 없다.
mu = 0,
var.equal=F)
mean(USA$Origin) ; sd(USA$Origin) ; length(USA$Origin)
mean(non$Origin) ; sd(non$Origin) ; length(non$Origin)
# 1) 정규성 등분산성 검토
USA<-subset(Cars93, Origin=='USA')
shapiro.test(USA$Price) ;qqnorm(USA$Price) ;qqline(USA$Price) # P(0.0002)<0.05 : 정규성을 이루지 않는다.
non<-subset(Cars93, Origin=='non-USA')
shapiro.test(non$Price) ;qqnorm(non$Price) ;qqline(non$Price) # P(0.0002)<0.05 : 정규성을 이루지 않는다.
var.test(Cars93$Price ~ Cars93$Origin) # P(0.01387)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(Cars93$Price ~ Cars93$Origin,   # P(0.34)>0.05 평균의 차이가 없다.
mu = 0,
var.equal=F)
mean(USA$Origin) ; sd(USA$Origin) ; length(USA$Origin)
mean(non$Origin) ; sd(non$Origin) ; length(non$Origin)
mean(USA$Price) ; sd(USA$Price) ; length(USA$Price)
mean(non$Price) ; sd(non$Price) ; length(non$Price)
# 3) 판정
t.test(Cars93$Price ~ Cars93$Origin,   # P(0.34)>0.05 평균의 차이가 없다.
mu = 0,
var.equal=F)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
shapiro.test(subcompact$hwy); qqnorm(subcompact$hwy); qqline(subcompact$hwy) # P(0.01036)<0.05 : 정규성을 이루지 않는다.
midsize    <- subset(mpg, mpg$class=='midsize')
shapiro.test(midsize$hwy); qqnorm(midsize$hwy) ;qqline(midsize$hwy) # P(0.01311)<0.05 :정규성을 이루지 않는다.
var.test(sm$hwy ~ sm$class)  # P(8.825e-08)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
sm<-rbind(subcompact,midsize)
sm<-rbind(subcompact,midsize)
var.test(sm$hwy ~ sm$class)  # P(8.825e-08)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(sm$hwy ~ sm$class,            # P(0.38)>0.05 고속도로 연비의 차이가 없다.
mu = 0,
var.equal=F)
mean(subcompact$hwy) ; sd(subcompact$hwy) ; length(subcompact$hwy)
mean(midsize$hwy) ; sd(midsize$hwy) ; length(midsize$hwy)
# 3) 판정
t.test(rp$cty ~ rp$fl, # P(0.228)>0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
# 1) 정규성 등분산성 검토
r <- subset(mpg, fl=='r')
shapiro.test(r$cty);qqnorm(r$cty) ;qqline(r$cty) # P(2.7e-05)<0.05 :정규성을 이루지 않는다.
p <- subset(mpg, fl=='p')
shapiro.test(p$cty); qqnorm(p$cty);qqline(p$cty) # P(0.498)<0.05 :정규성을 이루지 않으나 근접하다..
rp<-rbind(r,p)
var.test(rp$cty ~ rp$fl) # P(0.0428)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(rp$cty ~ rp$fl, # P(0.228)>0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
mean(p$cty) ; sd(p$cty) ; length(p$cty)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
subcompact
str(subcompact)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(2.7e-05)<0.05 :정규성을 이루지 않는다.
r <- subset(mpg, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.498)<0.05 :정규성을 이루지 않으나 근접하다..
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.498)<0.05 :정규성을 이루지 않으나 근접하다..
rf<-rbind(r,f)
var.test(rf$cty ~ rf$fl) # P(0.0428)<0.05 분산이 서로 동일하지 않다.
rp$fl
rp
rp<-rbind(r,p)
rp
var.test(rf$cty ~ rf$drv) # P(0.0428)<0.05 분산이 서로 동일하지 않다.
rp<-rbind(r,p)
var.test(rp$cty ~ rp$fl) # P(0.0428)<0.05 분산이 서로 동일하지 않다.
# 1) 정규성 등분산성 검토
r <- subset(mpg, fl=='r')
shapiro.test(r$cty);qqnorm(r$cty) ;qqline(r$cty) # P(2.7e-05)<0.05 :정규성을 이루지 않는다.
p <- subset(mpg, fl=='p')
shapiro.test(p$cty); qqnorm(p$cty);qqline(p$cty) # P(0.498)<0.05 :정규성을 이루지 않으나 근접하다..
rp<-rbind(r,p)
var.test(rp$cty ~ rp$fl) # P(0.0428)<0.05 분산이 서로 동일하지 않다.
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(0.09599)>0.05 :정규성을 이룬다.
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.1048)>0.05 :정규성을 이룬다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(0.09599)>0.05 :정규성을 이룬다.
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.1048)>0.05 :정규성을 이룬다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(0.228)>0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
mean(p$cty) ; sd(p$cty) ; length(p$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(0.09599)>0.05 :정규성을 이룬다.
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.1048)>0.05 :정규성을 이룬다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(0.228)>0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
mean(p$cty) ; sd(p$cty) ; length(p$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
mean(f$cty) ; sd(f$cty) ; length(f$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(0.228)>0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
mean(f$cty) ; sd(f$cty) ; length(f$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(0.09599)>0.05 :정규성을 이룬다.
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.1048)>0.05 :정규성을 이룬다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
mean(f$cty) ; sd(f$cty) ; length(f$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(0.09599)>0.05 :정규성을 이룬다.
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.1048)>0.05 :정규성을 이룬다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
mean(f$cty) ; sd(f$cty) ; length(f$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
str(rf)
table(rf$drv)
table(subcompact$drv)
table(mpg$drv)
table(mpg$drv=='subcompact')
table(mpg$drv)
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
# 1) 정규성 등분산성 검토
subcompact <- subset(mpg, mpg$class=='subcompact')
f <- subset(subcompact, drv=='f')
shapiro.test(f$cty);qqnorm(f$cty) ;qqline(f$cty) # P(0.09599)>0.05 :정규성을 이룬다.
r <- subset(subcompact, drv=='r')
shapiro.test(r$cty); qqnorm(r$cty);qqline(r$cty) # P(0.1048)>0.05 :정규성을 이룬다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
rf<-rbind(r,f)
var.test(rf$cty ~ rf$drv) # P(0.0026)<0.05 분산이 서로 동일하지 않다.
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 없다(같다)
mu = 0,
var.equal=F)
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 있다(다르다)
mu = 0,
var.equal=F)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 있다(다르다)
mu = 0,
var.equal=F)
mean(f$cty) ; sd(f$cty) ; length(f$cty)
mean(r$cty) ; sd(r$cty) ; length(r$cty)
# 3) 판정
t.test(rf$cty ~ rf$drv, # P(1.759e-06)<0.05 도시 연비는 차이가 있다(다르다)
mu = 0,
var.equal=F)
# 1) 정규성 등분산성 검토
am0 <- mtcars[mtcars$am == 0,]
shapiro.test(am0$mpg); qqnorm(am0$mpg); qqline(am0$mpg, col="red")  # P(0.8987)>0.05 : 정규성을 이룬다.
